#+TITLE:  Macintosh Configuration for Emacs
#+AUTHOR: Howard
#+EMAIL:  howard.abrams@gmail.com
#+DATE:   2014 Mar 22
#+TAGS:   emacs

The settings in this file are only included on a Macintosh, and even
then, only during a graphical run.

* Key Bindings

  Not going to use the Escape key as my Meta key ... that is what the
  Option key should be:

  #+BEGIN_SRC elisp
    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'super)
  #+END_SRC

  Once upon a time, I thought I would get confused and hit a
  Mac-specific keybinding with the "Command" key in Emacs, so I used
  the =mac-key-mode= to turn a standard Emacs into a more
  Macintosh-specific application. However, I find my fingers behaving
  the exact opposite, as I often hit =Option-b= to jump back a word when
  typing in the search bar in my browser.

  #+BEGIN_SRC elisp
    ;; Command-Q is awful (too easy to hit) ... especially next to
    ;; the more benign key binding to close a window: Cmd-W
    (bind-key "A-q" 'dont-kill-emacs)
  #+END_SRC

* Ligatures in Code

  With font that has symbolic ligatures, we can either use a prebuilt
  Mac Port (see [[https://lists.gnu.org/archive/html/emacs-devel/2015-08/msg00882.html][this message]]) or [[https://github.com/tonsky/FiraCode/wiki/Emacs-instructions][use this code]] to set up particular
  programming symbols to trigger those symbols.

  #+BEGIN_SRC elisp
    (if (fboundp 'mac-auto-operator-composition-mode)
        (mac-auto-operator-composition-mode)
      (let ((alist '((33 . ".\\(?:\\(?:==\\)\\|[!=]\\)")
                     (35 . ".\\(?:[(?[_{]\\)")
                     (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                     (43 . ".\\(?:\\(?:\\+\\+\\)\\|\\+\\)")
                     (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                     (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                     (58 . ".\\(?:[:=]\\)")
                     (59 . ".\\(?:;\\)")
                     (60 . ".\\(?:\\(?:!--\\)\\|\\(?:\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[/<=>|-]\\)")
                     (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                     (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                     (63 . ".\\(?:[:=?]\\)")
                     (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                     (94 . ".\\(?:=\\)")
                     (123 . ".\\(?:-\\)")
                     (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                     (126 . ".\\(?:[=@~-]\\)"))))
        (dolist (char-regexp alist)
          (set-char-table-range composition-function-table (car char-regexp)
                                `([,(cdr char-regexp) 0 font-shape-gstring])))))
  #+END_SRC

  These symbols are more prominent in all languages, as well as being
  a /single character symbol/ (well, until you hit backspace on it):

  [[https://github.com/tonsky/FiraCode/raw/master/showcases/all_ligatures.png]]

* Dash

   The [[http://kapeli.com/][Dash product]] is nice, and [[https://github.com/Kapeli/dash-at-point][this project]] allows Emacs to open
   Dash for documentation of anything with a =C-c d= keystroke:

   #+BEGIN_SRC elisp :tangle no
     (use-package dash-at-point
       :ensure t
       :bind ("C-c d d" . dash-at-point-with-docset)
       :config
       (add-to-list 'dash-at-point-mode-alist '(clojure-mode . "clojure"))
       (add-to-list 'dash-at-point-mode-alist '(ruby-mode . "ruby"))
       (add-to-list 'dash-at-point-mode-alist '(python-mode . "python2"))
       (add-to-list 'dash-at-point-mode-alist '(sh-mode . "bash"))
       (add-to-list 'dash-at-point-mode-alist '(emacs-lisp-mode . "elisp")))
   #+END_SRC

* Brew and ls

  Since the default ls for the Mac isn't so good, I always have the
  GNU ls version available in =/usr/local/bin/gls=.

  #+BEGIN_SRC elisp
    (require 'ls-lisp)
    (setq ls-lisp-use-insert-directory-program t)
    (setq insert-directory-program "/usr/local/bin/gls")
  #+END_SRC

* Notifications

  Looking at making some processes a bit more obvious, for instance,
  when a command kicked off in the eshell takes too much time, I need
  it to beep when it is done. For this, I simply shell out to Mac's
  notification center using the [[https://github.com/alloy/terminal-notifier][terminal-notifier]]. To install, do:

  #+BEGIN_EXAMPLE
  brew install terminal-notifier
  #+END_EXAMPLE

  The =beep= command can either be typed at the end of a command
  (after a semi-colon), or at the beginning, since anything following
  is executed first, and the notification follows.

  #+BEGIN_SRC elisp
    (defun eshell/beep (&rest args)
      "Send a Mac notification message when the command given has
    completed."

      (let ((comment (if args
                         (concat "Process has completed: " (car args))
                       "Process has completed.")))
        (if args
            (eshell-plain-command (car args) (cdr args)))

        (shell-command-to-string
         (concat "terminal-notifier -message '"
                 comment
                 "' -title 'Emacs' -subtitle 'Eshell Process Completed'"
                 " -sound default -sender org.gnu.Emacs"))))
  #+END_SRC

* Skype

  I normally mute Skype with some Alfred keystroke running some
  AppleScript. However, Emacs will grab all keystrokes before
  passing them on, so I need this function:

  #+BEGIN_SRC elisp
     (defun mute-skype ()
       "Mutes or unmutes Skype via an AppleScript call."
       (interactive)
       (let ((mute-script "tell application \"Skype\"
      if \(send command \"GET MUTE\" script name \"MuteToggler\"\) is equal to \"MUTE ON\" then
        send command \"SET MUTE OFF\" script name \"MuteToggler\"
      else
        send command \"SET MUTE ON\" script name \"MuteToggler\"
      end if
    end tell"))
         (progn
           (call-process "osascript" nil nil nil "-ss" "-e" mute-script)
           (message "Skype (un)mute message has been sent."))))

    (global-set-key (kbd "C-M-A-m") 'mute-skype)
  #+END_SRC

* Technical Artifacts

  Make sure that we can simply =require= this library.

  #+BEGIN_SRC elisp
    (provide 'init-mac)
  #+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization for Mac OSX

#+PROPERTY:    header-args:sh     :tangle no
#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/elisp/init-mac.el
#+PROPERTY:    header-args:       :results silent   :eval no-export   :comments org

#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
